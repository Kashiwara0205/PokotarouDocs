{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Pokotarou is convinient Mysql seeder of Ruby on Rails. Easy to use!! Just use yml file. very very very simple! You dont' have to write ruby program about seed data! Fast speed!! Pokotarou is fast seeder. Because contains Activerecord-import . so, always run bulk insert when execute rails db:seed command! If you use Pokotarou about following table. Field Type NULL id bigint(20) NO name varchar(255) YES created_at datetime NO updated_at datetime NO Pokotarou can register 10,000 records in 0.41s on average.","title":"Home"},{"location":"#home","text":"Pokotarou is convinient Mysql seeder of Ruby on Rails. Easy to use!! Just use yml file. very very very simple! You dont' have to write ruby program about seed data! Fast speed!! Pokotarou is fast seeder. Because contains Activerecord-import . so, always run bulk insert when execute rails db:seed command! If you use Pokotarou about following table. Field Type NULL id bigint(20) NO name varchar(255) YES created_at datetime NO updated_at datetime NO Pokotarou can register 10,000 records in 0.41s on average.","title":"Home"},{"location":"advanced_setting/","text":"Advanced Setting Grouping Grouping is useful function. Especially useful when setting multiple options. Default: Member: grouping: # set columns you want to group str_g: [ name , remark ] col: # you can use str_g at col str_g: ['yarh!'] option: # also you can use str_g at option str_g: [ add_id ] Result Member.all.pluck(:name) = ['yarh!_0', 'yarh!_1', 'yarh!_2'] Template You can set template config by template' key. The template can be overwritten with the one set later. template': pref_template: loop: 3 col: pref_id: F|Pref name: [ hogeta , fuga , pokota ] Pref: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member1: Member: template: pref_template Member2: Member: template: pref_template col: name: [ hogeta2 , fuga2 , pokota2 ] Result Member.all.pluck(:name) = [ hogeta , fuga , pokota , hogeta2 , fuga2 , pokota2 ] Return You can set return value by return' key. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] return': maked[:Default][:Pref][:name] Result return_val = Pokotarou.execute( yml_filepath ) return_val = [ Hokkaido , Aomori , Iwate ] Args You can set args by hash. Pokotarou.set_args({ name: [ Hokkaido , Aomori , Iwate ] }) Pokotarou.execute( yml_filepath ) Default: Pref: loop: 3 col: name: args[:name] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Const You can set const variables by const' key. const': name: hoge Default: Pref: loop: 3 col: name: const[:name] Validation Run validation when regist Default: Pref: loop: 3 validate: true Disable Autoincrement You can disable the autoincrement setting If you disable the setting, you can register id data prepared by yourself Default: Pref: loop: 3 autoincrement: false col: id: [100, 101, 102] Result Pref.all.pluck(:id) = [100, 101, 102]","title":"Advanced Setting"},{"location":"advanced_setting/#advanced-setting","text":"","title":"Advanced Setting"},{"location":"advanced_setting/#grouping","text":"Grouping is useful function. Especially useful when setting multiple options. Default: Member: grouping: # set columns you want to group str_g: [ name , remark ] col: # you can use str_g at col str_g: ['yarh!'] option: # also you can use str_g at option str_g: [ add_id ] Result Member.all.pluck(:name) = ['yarh!_0', 'yarh!_1', 'yarh!_2']","title":"Grouping"},{"location":"advanced_setting/#template","text":"You can set template config by template' key. The template can be overwritten with the one set later. template': pref_template: loop: 3 col: pref_id: F|Pref name: [ hogeta , fuga , pokota ] Pref: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member1: Member: template: pref_template Member2: Member: template: pref_template col: name: [ hogeta2 , fuga2 , pokota2 ] Result Member.all.pluck(:name) = [ hogeta , fuga , pokota , hogeta2 , fuga2 , pokota2 ]","title":"Template"},{"location":"advanced_setting/#return","text":"You can set return value by return' key. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] return': maked[:Default][:Pref][:name] Result return_val = Pokotarou.execute( yml_filepath ) return_val = [ Hokkaido , Aomori , Iwate ]","title":"Return"},{"location":"advanced_setting/#args","text":"You can set args by hash. Pokotarou.set_args({ name: [ Hokkaido , Aomori , Iwate ] }) Pokotarou.execute( yml_filepath ) Default: Pref: loop: 3 col: name: args[:name] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ]","title":"Args"},{"location":"advanced_setting/#const","text":"You can set const variables by const' key. const': name: hoge Default: Pref: loop: 3 col: name: const[:name]","title":"Const"},{"location":"advanced_setting/#validation","text":"Run validation when regist Default: Pref: loop: 3 validate: true","title":"Validation"},{"location":"advanced_setting/#disable-autoincrement","text":"You can disable the autoincrement setting If you disable the setting, you can register id data prepared by yourself Default: Pref: loop: 3 autoincrement: false col: id: [100, 101, 102] Result Pref.all.pluck(:id) = [100, 101, 102]","title":"Disable Autoincrement"},{"location":"basic_usage/","text":"Basic Usage Just make yml file. If you register data to following prefecture data. prefecture table Field Type NULL id bigint(20) NO name varchar(255) YES created_at datetime NO updated_at datetime NO prefecture model Model Pref First, Please make following yml file your favorite directory of rails project. The file name can be anything. In my case, made yml file in db directory and named file pref_data . Default: Pref: loop: 3 and write following ruby code in seeds.rb. Pokotarou.execute( ./db/pref_data.yml ) and execute following command!!!!! $ rails db:seed prefecture data is registerd your db. Let's check with the following code. # You have to get 3 Pref.all.count = 3","title":"Basic Usage"},{"location":"basic_usage/#basic-usage","text":"Just make yml file. If you register data to following prefecture data. prefecture table Field Type NULL id bigint(20) NO name varchar(255) YES created_at datetime NO updated_at datetime NO prefecture model Model Pref First, Please make following yml file your favorite directory of rails project. The file name can be anything. In my case, made yml file in db directory and named file pref_data . Default: Pref: loop: 3 and write following ruby code in seeds.rb. Pokotarou.execute( ./db/pref_data.yml ) and execute following command!!!!! $ rails db:seed prefecture data is registerd your db. Let's check with the following code. # You have to get 3 Pref.all.count = 3","title":"Basic Usage"},{"location":"converter/","text":"Converter convert description empty convert val to empty nil convert val to nil big_text convert val to big_text(\"text\" * 50) br_text convert val to br_text(\"text\\n\" * 5) For example, following configfile register seed data while replacing with nil Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] convert: name: [ nil(0..2) ] Result Pref.all.pluck(:name) = [nil, nil, nil] a little complex version Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] convert: name: [ empty(0..0) , nil(1..2) ] Result Pref.all.pluck(:name) = [ , nil, nil]","title":"Converter"},{"location":"converter/#converter","text":"convert description empty convert val to empty nil convert val to nil big_text convert val to big_text(\"text\" * 50) br_text convert val to br_text(\"text\\n\" * 5) For example, following configfile register seed data while replacing with nil Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] convert: name: [ nil(0..2) ] Result Pref.all.pluck(:name) = [nil, nil, nil] a little complex version Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] convert: name: [ empty(0..0) , nil(1..2) ] Result Pref.all.pluck(:name) = [ , nil, nil]","title":"Converter"},{"location":"getting_started/","text":"Getting started Please add this line to your Rails application's Gemfile gem 'pokotarou' And then run following commnad $ bundle install Or install it yourself as $ gem install pokotarou","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Please add this line to your Rails application's Gemfile gem 'pokotarou' And then run following commnad $ bundle install Or install it yourself as $ gem install pokotarou","title":"Getting started"},{"location":"lets_pokotarou/","text":"Let's Pokotarou By the end of reading this document, you will be a pokotarou master... Register seed data by yml If you are troublesome to set columns data in yml. you don't set columns data. Pokotarou will register automatically prepared data. Let's see the following example! Default: Pref: loop: 3 This yml file register automatically prepared data three times . Offcourse, you can set seed data by yourself! Default: Pref: loop: 3 col: name: Hokkaido Array You can set array data in yml. Array data is registerd one by one. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Don't worry if the array exceeds the number of loops. Circulates automatically. Default: Pref: loop: 6 col: name: [ Hokkaido , Aomori , Iwate ] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate , Hokkaido , Aomori , Iwate ] Maked hash 'maked' is bery userfule function. It is hash and accumulate data registed in the past. For example, in the case of below, reffer name of Pref in Default block by maked. Default: Pref: loop: 2 col: name: [ Hokkaido , Aomori ] Member: loop: 2 col: name: maked[:Default][:Pref][:name] maked hash structure { Block1:{ Model:{ col1:xxx, col2:xxx col3:xxx } }, Block2:{ Model:{ col1:xxx, col2:xxx col3:xxx } }, } Result Member.all.pluck(:name) = [ Hokkaido , Aomori ] MakedCol hash 'maked_col' is like 'maked' but you can write without 'block key' Let's look following example. Default: Pref: loop: 2 col: name: [ Hokkaido , Aomori ] Member: loop: 2 col: name: maked_col[:Pref][:name] maked_col structure { Model:{ col1:xxx(merged array from each blocks), col2:xxx, col3:xxx } } Result Member.all.pluck(:name) = [ Hokkaido , Aomori ] Foreign key \u203b If you set association(belongs_to, has_many...), Pokotarou automatically register foreign keys { F|Model } means that Model.all.pluck(:id). Let's see the following file. Member model record is registerd with pref_id(foregin key). Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member: loop: 3 col: pref_id: F|Pref Result Pref.all.pluck(:id) = [1, 2, 3] Member.all.pluck(:pref_id) = [1, 2, 3] Seeting Columns If you want to register data from each model. you can write following example. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member: loop: 3 col: pref_id: C|Pref|id name: C|Pref|name Result Pref.all.pluck(:id) = [1, 2, 3] Member.all.pluck(:pref_id) = [1, 2, 3] Member.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Run ruby code in yml ' ' means expression expansion. You can run ruby code in ' '. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] created_at: Date.parse('1997/02/05') Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Pref.all.pluck(:created_at) = [1997/02/05, 1997/02/05, 1997/02/05] Import(require ruby file in pokotarou) If you want to require ruby file and add method which run in yml. You can add method. Let's see the follwoing example. First, setting yml file. I want to run pref_name method. Default: Pref: loop: 3 col: # this is ruby method name: pref_name setting the following ruby file def pref_name [ Hokkaido , Aomori , Iwate ] end and run the following code in seeds.rb. Pokotarou.import( ./method_filepath ) Pokotarou.execute( ./config_filepath ) or you can also use array Pokotarou.import([ ./method_filepath ]) Pokotarou.execute( ./config_filepath ) Pokotarou.import means that require which run in pokotarou. Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Import in yml You can import in pokotarou yml file. import': - /method_filepath - /method_filepath2 Default: Pref: loop: 3 col: # you can use imported method name: pref_name Multiple blocks Default: Pref: loop: 3 Default2: Pref: loop: 3 Result Pref.all.count = 6 and, You can change the name of the block Hoge: Pref: loop: 3 Fuga: Pref: loop: 3 Result Pref.all.count = 6","title":"Let's Pokotarou"},{"location":"lets_pokotarou/#lets-pokotarou","text":"By the end of reading this document, you will be a pokotarou master...","title":"Let's Pokotarou"},{"location":"lets_pokotarou/#register-seed-data-by-yml","text":"If you are troublesome to set columns data in yml. you don't set columns data. Pokotarou will register automatically prepared data. Let's see the following example! Default: Pref: loop: 3 This yml file register automatically prepared data three times . Offcourse, you can set seed data by yourself! Default: Pref: loop: 3 col: name: Hokkaido","title":"Register seed data by yml"},{"location":"lets_pokotarou/#array","text":"You can set array data in yml. Array data is registerd one by one. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Don't worry if the array exceeds the number of loops. Circulates automatically. Default: Pref: loop: 6 col: name: [ Hokkaido , Aomori , Iwate ] Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate , Hokkaido , Aomori , Iwate ]","title":"Array"},{"location":"lets_pokotarou/#maked-hash","text":"'maked' is bery userfule function. It is hash and accumulate data registed in the past. For example, in the case of below, reffer name of Pref in Default block by maked. Default: Pref: loop: 2 col: name: [ Hokkaido , Aomori ] Member: loop: 2 col: name: maked[:Default][:Pref][:name] maked hash structure { Block1:{ Model:{ col1:xxx, col2:xxx col3:xxx } }, Block2:{ Model:{ col1:xxx, col2:xxx col3:xxx } }, } Result Member.all.pluck(:name) = [ Hokkaido , Aomori ]","title":"Maked hash"},{"location":"lets_pokotarou/#makedcol-hash","text":"'maked_col' is like 'maked' but you can write without 'block key' Let's look following example. Default: Pref: loop: 2 col: name: [ Hokkaido , Aomori ] Member: loop: 2 col: name: maked_col[:Pref][:name] maked_col structure { Model:{ col1:xxx(merged array from each blocks), col2:xxx, col3:xxx } } Result Member.all.pluck(:name) = [ Hokkaido , Aomori ]","title":"MakedCol hash"},{"location":"lets_pokotarou/#foreign-key","text":"\u203b If you set association(belongs_to, has_many...), Pokotarou automatically register foreign keys { F|Model } means that Model.all.pluck(:id). Let's see the following file. Member model record is registerd with pref_id(foregin key). Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member: loop: 3 col: pref_id: F|Pref Result Pref.all.pluck(:id) = [1, 2, 3] Member.all.pluck(:pref_id) = [1, 2, 3]","title":"Foreign key"},{"location":"lets_pokotarou/#seeting-columns","text":"If you want to register data from each model. you can write following example. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] Member: loop: 3 col: pref_id: C|Pref|id name: C|Pref|name Result Pref.all.pluck(:id) = [1, 2, 3] Member.all.pluck(:pref_id) = [1, 2, 3] Member.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ]","title":"Seeting Columns"},{"location":"lets_pokotarou/#run-ruby-code-in-yml","text":"' ' means expression expansion. You can run ruby code in ' '. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] created_at: Date.parse('1997/02/05') Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ] Pref.all.pluck(:created_at) = [1997/02/05, 1997/02/05, 1997/02/05]","title":"Run ruby code in yml"},{"location":"lets_pokotarou/#importrequire-ruby-file-in-pokotarou","text":"If you want to require ruby file and add method which run in yml. You can add method. Let's see the follwoing example. First, setting yml file. I want to run pref_name method. Default: Pref: loop: 3 col: # this is ruby method name: pref_name setting the following ruby file def pref_name [ Hokkaido , Aomori , Iwate ] end and run the following code in seeds.rb. Pokotarou.import( ./method_filepath ) Pokotarou.execute( ./config_filepath ) or you can also use array Pokotarou.import([ ./method_filepath ]) Pokotarou.execute( ./config_filepath ) Pokotarou.import means that require which run in pokotarou. Result Pref.all.pluck(:name) = [ Hokkaido , Aomori , Iwate ]","title":"Import(require ruby file in pokotarou)"},{"location":"lets_pokotarou/#import-in-yml","text":"You can import in pokotarou yml file. import': - /method_filepath - /method_filepath2 Default: Pref: loop: 3 col: # you can use imported method name: pref_name","title":"Import in yml"},{"location":"lets_pokotarou/#multiple-blocks","text":"Default: Pref: loop: 3 Default2: Pref: loop: 3 Result Pref.all.count = 6 and, You can change the name of the block Hoge: Pref: loop: 3 Fuga: Pref: loop: 3 Result Pref.all.count = 6","title":"Multiple blocks"},{"location":"license/","text":"License The gem is available as open source under the terms of the MIT License .","title":"License"},{"location":"license/#license","text":"The gem is available as open source under the terms of the MIT License .","title":"License"},{"location":"p_tool/","text":"Ptool(Pokotarou tool) Ptool is convinient seed data generater. gen_br_text generate following br_text. text\\ntext param description none none Default: Pref: loop: 3 col: name: Ptool.gen_br_text gen_created_at generate created_at array. param description n generate day number, if 7 then generate 7size array, default 7 datetime_str begin datetime, default DateTime.now.to_s with_random_time boolean, if true register with random_time, default false Default: Pref: loop: 3 col: created_at: Ptool.gen_created_at(10, 1997-02-05 , true) gen_updated_at generate updated_at array. param description created_arr datetime array with_random_time boolean, if true register with random_time, default false Default: Pref: loop: 3 col: created_at: Ptool.gen_created_at(10, 1997-02-05 , true) updated_at: Ptool.gen_updated_at(maked_col[:Pref][:created_at], true)","title":"Ptool(Pokotarou tool)"},{"location":"p_tool/#ptoolpokotarou-tool","text":"Ptool is convinient seed data generater.","title":"Ptool(Pokotarou tool)"},{"location":"p_tool/#gen_br_text","text":"generate following br_text. text\\ntext param description none none Default: Pref: loop: 3 col: name: Ptool.gen_br_text","title":"gen_br_text"},{"location":"p_tool/#gen_created_at","text":"generate created_at array. param description n generate day number, if 7 then generate 7size array, default 7 datetime_str begin datetime, default DateTime.now.to_s with_random_time boolean, if true register with random_time, default false Default: Pref: loop: 3 col: created_at: Ptool.gen_created_at(10, 1997-02-05 , true)","title":"gen_created_at"},{"location":"p_tool/#gen_updated_at","text":"generate updated_at array. param description created_arr datetime array with_random_time boolean, if true register with random_time, default false Default: Pref: loop: 3 col: created_at: Ptool.gen_created_at(10, 1997-02-05 , true) updated_at: Ptool.gen_updated_at(maked_col[:Pref][:created_at], true)","title":"gen_updated_at"},{"location":"pipeline_execute/","text":"Pipeline Execute Pokotarou can run by pipeline. Pokotarou.pipleine_execute means that continuous execution of Pokotarou.execute . You can set filepath, change_data, args parameter. Pokotarou.pipeline_execute([{ filepath: ./yml_filepath , change_data: { Default: { Pref: { name: [ a , b , c ] } } }, args: { created_at: [DateTime.now] } },{ filepath: ./yml_filepath , }]) return val created in the previous step can get by args[:passed_return_val] in the next step. # First step Default: Pref: loop: 3 col: name: [ a , b , c ] return': [ hoge , fuga , piyo ] # Second step Default: Pref: loop: 3 col: name: args[:passed_return_val] Pokotarou.pipeline_execute([{ filepath: ./first_step_yml_filepath , },{ filepath: ./second_step_yml_filepath , }]) Result Pref.all.pluck(:name) = [ a , b , c , hoge , fuga , piyo ]","title":"Pipeline Execute"},{"location":"pipeline_execute/#pipeline-execute","text":"Pokotarou can run by pipeline. Pokotarou.pipleine_execute means that continuous execution of Pokotarou.execute . You can set filepath, change_data, args parameter. Pokotarou.pipeline_execute([{ filepath: ./yml_filepath , change_data: { Default: { Pref: { name: [ a , b , c ] } } }, args: { created_at: [DateTime.now] } },{ filepath: ./yml_filepath , }]) return val created in the previous step can get by args[:passed_return_val] in the next step. # First step Default: Pref: loop: 3 col: name: [ a , b , c ] return': [ hoge , fuga , piyo ] # Second step Default: Pref: loop: 3 col: name: args[:passed_return_val] Pokotarou.pipeline_execute([{ filepath: ./first_step_yml_filepath , },{ filepath: ./second_step_yml_filepath , }]) Result Pref.all.pluck(:name) = [ a , b , c , hoge , fuga , piyo ]","title":"Pipeline Execute"},{"location":"pokotarou_handler/","text":"Pokotarou Handler If you want to make test data dynamically, you should use PokotarouHandler . When you use PokotarouHandler , can update pokotarou's parameter in ruby code. Change setting yml In the following example, the number of loops is changed handler = Pokotarou.gen_handler( ./config_filepath ) # change loop config handler.change_loop(:Default, :Pref, 6) Pokotarou.execute(handler.get_data) In the following example, seed data is changed handler = Pokotarou.gen_handler( ./yml_filepath ) # change seed data config number handler.change_seed(:Default, :Pref, :name, [ a , b , c ]) Pokotarou.execute(handler.get_data) Delete setting yml In the following example, delete block config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete model config in parameter handler.delete_block(:Default) Pokotarou.execute(handler.get_data) In the following example, delete model config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete model config in parameter handler.delete_model(:Default, :Pref) Pokotarou.execute(handler.get_data) In the following example, delete col config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete col config in parameter handler.delete_col(:Default, :Pref, :name) Pokotarou.execute(handler.get_data)","title":"Pokotarou Handler"},{"location":"pokotarou_handler/#pokotarou-handler","text":"If you want to make test data dynamically, you should use PokotarouHandler . When you use PokotarouHandler , can update pokotarou's parameter in ruby code.","title":"Pokotarou Handler"},{"location":"pokotarou_handler/#change-setting-yml","text":"In the following example, the number of loops is changed handler = Pokotarou.gen_handler( ./config_filepath ) # change loop config handler.change_loop(:Default, :Pref, 6) Pokotarou.execute(handler.get_data) In the following example, seed data is changed handler = Pokotarou.gen_handler( ./yml_filepath ) # change seed data config number handler.change_seed(:Default, :Pref, :name, [ a , b , c ]) Pokotarou.execute(handler.get_data)","title":"Change setting yml"},{"location":"pokotarou_handler/#delete-setting-yml","text":"In the following example, delete block config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete model config in parameter handler.delete_block(:Default) Pokotarou.execute(handler.get_data) In the following example, delete model config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete model config in parameter handler.delete_model(:Default, :Pref) Pokotarou.execute(handler.get_data) In the following example, delete col config handler = Pokotarou.gen_handler( ./yml_filepath ) # delete col config in parameter handler.delete_col(:Default, :Pref, :name) Pokotarou.execute(handler.get_data)","title":"Delete setting yml"},{"location":"pokotarou_option/","text":"Pokotarou option Option is useful function. If you can master it, it may be easier to create test data. Random Shuffle seed data when register. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] # This is option option: name: [ random ] Result # The following results change from run to run Pref.all.pluck(:name) = [ Aomori , Iwate , Iwate ] Add identical numbers Add identical numbers to seed data of String type Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] option: name: [ add_id ] Result Pref.all.pluck(:name) = [ Hokkaido_0 , Aomori_1 , Iwate_2 ] Combine serveral options Combination of options is possible Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] option: name: [ add_id , random ] The following results change from run to run Result Pref.all.pluck(:name) = [ Hokkaido_0 , Iwate_1 , Hokkaido_2 ]","title":"Pokotarou option"},{"location":"pokotarou_option/#pokotarou-option","text":"Option is useful function. If you can master it, it may be easier to create test data.","title":"Pokotarou option"},{"location":"pokotarou_option/#random","text":"Shuffle seed data when register. Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] # This is option option: name: [ random ] Result # The following results change from run to run Pref.all.pluck(:name) = [ Aomori , Iwate , Iwate ]","title":"Random"},{"location":"pokotarou_option/#add-identical-numbers","text":"Add identical numbers to seed data of String type Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] option: name: [ add_id ] Result Pref.all.pluck(:name) = [ Hokkaido_0 , Aomori_1 , Iwate_2 ]","title":"Add identical numbers"},{"location":"pokotarou_option/#combine-serveral-options","text":"Combination of options is possible Default: Pref: loop: 3 col: name: [ Hokkaido , Aomori , Iwate ] option: name: [ add_id , random ] The following results change from run to run Result Pref.all.pluck(:name) = [ Hokkaido_0 , Iwate_1 , Hokkaido_2 ]","title":"Combine serveral options"}]}